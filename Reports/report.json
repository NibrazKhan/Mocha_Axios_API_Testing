{
  "stats": {
    "suites": 1,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2022-09-08T21:30:04.159Z",
    "end": "2022-09-08T21:30:10.041Z",
    "duration": 5882,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ffedf0fd-a0c5-457d-8238-8e7b1ac79c1c",
      "title": "",
      "fullFile": "C:\\Users\\NibrazKhan\\Desktop\\Road to SDT\\Assignments\\Mocha_Chai_API_Testing\\User_API_Automation.test\\User.test.js",
      "file": "\\User.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3be9a50e-2073-4419-89f5-1d57dbbf3a87",
          "title": "User API Automation",
          "fullFile": "C:\\Users\\NibrazKhan\\Desktop\\Road to SDT\\Assignments\\Mocha_Chai_API_Testing\\User_API_Automation.test\\User.test.js",
          "file": "\\User.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "User can do login successfully",
              "fullTitle": "User API Automation User can do login successfully",
              "timedOut": false,
              "duration": 119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var { data } = await axios.post(`${envVariables.baseUrl}/user/login`, {\n    \"email\": \"salman@grr.la\",\n    \"password\": \"1234\"\n},\n    {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })\nvar token = data.token;\nenvVariables.token = token;\nfs.writeFileSync('./env.json', JSON.stringify(envVariables))",
              "err": {},
              "uuid": "525599dd-ccd7-4c67-96ef-ef69d07407f3",
              "parentUUID": "3be9a50e-2073-4419-89f5-1d57dbbf3a87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User can view list if having proper authorization",
              "fullTitle": "User API Automation User can view list if having proper authorization",
              "timedOut": false,
              "duration": 4952,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var { data } = await axios.get(`${envVariables.baseUrl}/user/list`, {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': envVariables.token\n    }\n})\nid = data.users[0].id;\nexpect(data.message).contains(\"User list\");",
              "err": {},
              "uuid": "92f04871-610d-4d36-96c8-3b9b5a415eb3",
              "parentUUID": "3be9a50e-2073-4419-89f5-1d57dbbf3a87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get User list for incorrect authorization",
              "fullTitle": "User API Automation Get User list for incorrect authorization",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try{var response = await axios.get(`${envVariables.baseUrl}/user/list`, {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': '345345345'\n    }\n\n})}\ncatch(error){\n    console.log(error);\n    expect(error).to.exist;\n}\n// console.log(response.status);\n// console.log(response.data.error.message)\n// expect(response.status).equals(403)\n// expect(response.data.error.message).contains(\"Token expired\");",
              "err": {},
              "uuid": "fbc82f5b-2296-44c9-b7bb-8277b1dec427",
              "parentUUID": "3be9a50e-2073-4419-89f5-1d57dbbf3a87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get User list if user does not input token",
              "fullTitle": "User API Automation Get User list if user does not input token",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try{var response = await axios.get(`${envVariables.baseUrl}/user/list`, {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': ''\n    }\n\n})}\ncatch(error){\n    console.log(error);\n    expect(error).to.exist;\n}",
              "err": {},
              "uuid": "239fbc0f-0a76-40b5-879c-6930435508dd",
              "parentUUID": "3be9a50e-2073-4419-89f5-1d57dbbf3a87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create new users",
              "fullTitle": "User API Automation Create new users",
              "timedOut": false,
              "duration": 69,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var { data } = await axios.post(`${envVariables.baseUrl}/user/create`, {\n    \"name\": `${faker.name.firstName()} ${faker.name.lastName()}`,\n    \"email\": `test${randomId(100000, 999999)}@test.com`,\n    \"password\": \"123456\",\n    \"phone_number\": `01501${randomId(100000, 9999999)}`,\n    \"nid\": \"123456789\",\n    \"role\": \"Customer\"\n}, {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': envVariables.token,\n        'X-AUTH-SECRET-KEY': envVariables['X-AUTH-SECRET-KEY']\n    }\n})\nconsole.log(data);\nexpect(data.message).contains('User created successfully')\nenvVariables.id = data.user.id;\nenvVariables.name = data.user.name;\nenvVariables.email = data.user.email;\nenvVariables.phoneNumber = data.user.phone_number;\nfs.writeFileSync('./env.json', JSON.stringify(envVariables));",
              "err": {},
              "uuid": "e565287f-433d-4b4d-ac92-9ce8326e9aaa",
              "parentUUID": "3be9a50e-2073-4419-89f5-1d57dbbf3a87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create existing users",
              "fullTitle": "User API Automation Create existing users",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var response = await axios.post(`${envVariables.baseUrl}/user/create`, {\n    \"name\": `Guillermo Beer`,\n    \"email\": `Madonna0@yahoo.com`,\n    \"password\": \"fTTTI_KdnKnjv5R\",\n    \"phone_number\": `01713648066`,\n    \"nid\": \"6413648066\",\n    \"role\": \"Customer\"\n}, {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': envVariables.token,\n        'X-AUTH-SECRET-KEY': envVariables['X-AUTH-SECRET-KEY']\n    }\n})\n    \nexpect(response.data.message).contains('User already exists')\nexpect(response.status).equals(208)",
              "err": {},
              "uuid": "440b86c5-ce86-456d-ba3e-b2fb4620212d",
              "parentUUID": "3be9a50e-2073-4419-89f5-1d57dbbf3a87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User can search if having proper authorization",
              "fullTitle": "User API Automation User can search if having proper authorization",
              "timedOut": false,
              "duration": 80,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var response = await axios.get(`${envVariables.baseUrl}/user/search?id=${id}`, {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': envVariables.token,\n        'X-AUTH-SECRET-KEY': envVariables['X-AUTH-SECRET-KEY']\n    }\n})\nconsole.log(response.data.user.name);\nexpect(response.data.user.role).contains('Customer')\nexpect(response.status).equals(200);",
              "err": {},
              "uuid": "43dc3fe3-c882-444a-881c-c33e0845c10e",
              "parentUUID": "3be9a50e-2073-4419-89f5-1d57dbbf3a87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Search user for invalid id",
              "fullTitle": "User API Automation Search user for invalid id",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var response = await axios.get(`${envVariables.baseUrl}/user/search?id=34534`, {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': envVariables.token,\n        'X-AUTH-SECRET-KEY': envVariables['X-AUTH-SECRET-KEY']\n    }\n})\n// console.log(data.user.name);\nexpect(response.status).equals(200);\nexpect(response.data.user).equals(null)",
              "err": {},
              "uuid": "73005bd6-db82-415c-95dd-74b5624e9fed",
              "parentUUID": "3be9a50e-2073-4419-89f5-1d57dbbf3a87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Search user for invalid Secret Key",
              "fullTitle": "User API Automation Search user for invalid Secret Key",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try{ var response = await axios.get(`${envVariables.baseUrl}/user/search?id=${id}`, {\n     headers: {\n         'Content-Type': 'application/json',\n         'Authorization': envVariables.token,\n         'X-AUTH-SECRET-KEY': 'bhugichugi'\n     }\n })}\n catch(error){\n     console.log(error);\n     expect(error).to.exist;\n }",
              "err": {},
              "uuid": "55160fa7-0113-4c81-ba95-523940770377",
              "parentUUID": "3be9a50e-2073-4419-89f5-1d57dbbf3a87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update User",
              "fullTitle": "User API Automation Update User",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var response = await axios.put(`${envVariables.baseUrl}/user/update/${id}`,\n{\n    \n    \"name\": \"Lionel Messi\",\n    \"email\": \"lione.messi@gmail.com\",\n    \"password\": \"HSeYnp2Ml04VEYf\",\n    \"phone_number\": \"01780406900\",\n    \"nid\": \"6416345698\",\n    \"role\": \"Customer\"\n},\n{\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': envVariables.token,\n        'X-AUTH-SECRET-KEY': envVariables['X-AUTH-SECRET-KEY']\n    }\n})\n// console.log(data.user.name);\nexpect(response.status).equals(200);\nexpect(response.data.message).contains(\"User updated successfully\")",
              "err": {},
              "uuid": "2dc33282-aded-4480-bc70-53d32c39444d",
              "parentUUID": "3be9a50e-2073-4419-89f5-1d57dbbf3a87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update User using PhoneNumber and Patch Method implemented",
              "fullTitle": "User API Automation Update User using PhoneNumber and Patch Method implemented",
              "timedOut": false,
              "duration": 69,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var response = await axios.patch(`${envVariables.baseUrl}/user/update/${id}`,\n{\n    \n    \"phone_number\": \"01707823561\"\n},\n{\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': envVariables.token,\n        'X-AUTH-SECRET-KEY': envVariables['X-AUTH-SECRET-KEY']\n    }\n})\n// console.log(data.user.name);\nexpect(response.status).equals(200);\nexpect(response.data.user.phone_number).equals(\"01707823561\")",
              "err": {},
              "uuid": "cf1e4587-6a0f-4ada-906d-cfe7de14a917",
              "parentUUID": "3be9a50e-2073-4419-89f5-1d57dbbf3a87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete user",
              "fullTitle": "User API Automation Delete user",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var response = await axios.delete(`${envVariables.baseUrl}/user/delete/${id}`,\n{\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': envVariables.token,\n        'X-AUTH-SECRET-KEY': envVariables['X-AUTH-SECRET-KEY']\n    }\n})\n// console.log(data.user.name);\nexpect(response.status).equals(200);\nexpect(response.data.message).contains(\"User deleted successfully\")",
              "err": {},
              "uuid": "9b292c6f-39d4-459c-93ef-8fba5b50b1aa",
              "parentUUID": "3be9a50e-2073-4419-89f5-1d57dbbf3a87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempting to delete already deleted user",
              "fullTitle": "User API Automation Attempting to delete already deleted user",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try{ var response = await axios.get(`${envVariables.baseUrl}/user/delete/${id}`, {\n     headers: {\n         'Content-Type': 'application/json',\n         'Authorization': envVariables.token,\n         'X-AUTH-SECRET-KEY': 'bhugichugi'\n     }\n })}\n catch(error){\n     console.log(error);\n     expect(error).to.exist;\n }",
              "err": {},
              "uuid": "cd17904d-2e9b-4817-8a29-47d06c4c4ae4",
              "parentUUID": "3be9a50e-2073-4419-89f5-1d57dbbf3a87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Searching the already deleted user",
              "fullTitle": "User API Automation Searching the already deleted user",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var response = await axios.get(`${envVariables.baseUrl}/user/search?id=${id}`, {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': envVariables.token,\n        'X-AUTH-SECRET-KEY': envVariables['X-AUTH-SECRET-KEY']\n    }\n})\n// console.log(data.user.name);\nexpect(response.status).equals(200);\nexpect(response.data.user).equals(null)",
              "err": {},
              "uuid": "6da311f8-df40-46e9-a0cb-2a522363efb0",
              "parentUUID": "3be9a50e-2073-4419-89f5-1d57dbbf3a87",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "525599dd-ccd7-4c67-96ef-ef69d07407f3",
            "92f04871-610d-4d36-96c8-3b9b5a415eb3",
            "fbc82f5b-2296-44c9-b7bb-8277b1dec427",
            "239fbc0f-0a76-40b5-879c-6930435508dd",
            "e565287f-433d-4b4d-ac92-9ce8326e9aaa",
            "440b86c5-ce86-456d-ba3e-b2fb4620212d",
            "43dc3fe3-c882-444a-881c-c33e0845c10e",
            "73005bd6-db82-415c-95dd-74b5624e9fed",
            "55160fa7-0113-4c81-ba95-523940770377",
            "2dc33282-aded-4480-bc70-53d32c39444d",
            "cf1e4587-6a0f-4ada-906d-cfe7de14a917",
            "9b292c6f-39d4-459c-93ef-8fba5b50b1aa",
            "cd17904d-2e9b-4817-8a29-47d06c4c4ae4",
            "6da311f8-df40-46e9-a0cb-2a522363efb0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5869,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report.html",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "Reports",
        "reportFilename": "report.html"
      },
      "version": "6.2.0"
    }
  }
}